---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: label-pss-on-new-ns
  annotations:
    policies.kyverno.io/title: Add Pod Security Standards Labels
    policies.kyverno.io/category: Security
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Namespace
    policies.kyverno.io/description: >-
      Automatically applies Pod Security Standards labels to new namespaces to enforce
      baseline security policies. This includes enforce, audit, and warn labels with
      appropriate versions for pod security admission controls.
spec:
  validationFailureAction: Audit
  background: false
  rules:
    - name: label-pss
      match:
        any:
          - resources:
              kinds: ["Namespace"]
      exclude:
        any:
          - resources:
              namespaces:
                [
                  "kube-system",
                  "kube-public",
                  "kube-node-lease",
                  "kyverno",
                ]
      preconditions:
        all:
          - key: "{{ request.operation }}"
            operator: Equals
            value: CREATE
      mutate:
        patchStrategicMerge:
          metadata:
            labels:
              pod-security.kubernetes.io/enforce: baseline
              pod-security.kubernetes.io/enforce-version: v1.33
              pod-security.kubernetes.io/audit: restricted
              pod-security.kubernetes.io/audit-version: v1.33
              pod-security.kubernetes.io/warn: restricted
              pod-security.kubernetes.io/warn-version: v1.33
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: generate-limitrange-per-namespace
  annotations:
    policies.kyverno.io/title: Generate LimitRange Per Namespace
    policies.kyverno.io/category: Resource Management
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Namespace
    policies.kyverno.io/description: >-
      Automatically generates a LimitRange resource in each new namespace to enforce
      default CPU and memory limits and requests for containers. This ensures proper
      resource governance and prevents resource exhaustion in the cluster.
spec:
  validationFailureAction: Audit
  background: false
  rules:
    - name: generate-limitrange
      match:
        any:
          - resources:
              kinds: ["Namespace"]
      exclude:
        any:
          - resources:
              namespaces:
                [
                  "kube-system",
                  "kube-public",
                  "kube-node-lease",
                  "kyverno",
                ]
      preconditions:
        all:
          - key: "{{ request.operation }}"
            operator: Equals
            value: CREATE
      generate:
        apiVersion: v1
        kind: LimitRange
        name: default-limits
        namespace: "{{ request.object.metadata.name }}"
        synchronize: false
        data:
          spec:
            limits:
              - type: "Container"
                default:
                  cpu: "500m"
                  memory: "512Mi"
                defaultRequest:
                  cpu: "250m"
                  memory: "256Mi"
                max:
                  cpu: "1"
                  memory: "1Gi"
                min:
                  cpu: "0m"
                  memory: "0Mi"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: generate-resourcequota-per-namespace
  annotations:
    policies.kyverno.io/title: Generate ResourceQuota Per Namespace
    policies.kyverno.io/category: Resource Management
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Namespace
    policies.kyverno.io/description: >-
      Automatically generates a ResourceQuota in each new namespace to enforce
      limits on CPU, memory, storage, and object counts. This ensures fair resource
      allocation across namespaces and prevents any single namespace from consuming
      excessive cluster resources.
spec:
  validationFailureAction: Audit
  background: false
  rules:
    - name: generate-resourcequota
      match:
        any:
          - resources:
              kinds: ["Namespace"]
      exclude:
        any:
          - resources:
              namespaces:
                [
                  "kube-system",
                  "kube-public",
                  "kube-node-lease",
                  "kyverno",
                ]
      preconditions:
        all:
          - key: "{{ request.operation }}"
            operator: Equals
            value: CREATE
      generate:
        apiVersion: v1
        kind: ResourceQuota
        name: standard-quota
        namespace: "{{ request.object.metadata.name }}"
        synchronize: false
        data:
          spec:
            hard:
              requests.cpu: "4"
              requests.memory: "4Gi"
              limits.cpu: "8"
              limits.memory: "8Gi"
              requests.ephemeral-storage: "8Gi"
              persistentvolumeclaims: "10"
              pods: "25"
              services: "25"
              services.loadbalancers: "10"
              configmaps: "25"
              secrets: "25"
---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: generate-network-policy-default-deny-per-namespace
  annotations:
    policies.kyverno.io/title: Generate Default Deny NetworkPolicy
    policies.kyverno.io/category: Security
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Namespace
    policies.kyverno.io/description: >-
      Automatically generates a default deny-all NetworkPolicy in each new namespace
      to enforce baseline network isolation. Namespaces can opt out by labeling
      themselves with either
      'network.kubernetes.io/skip-default-network-policy=true' or 'skip-network-policy=true'.
spec:
  validationFailureAction: Audit
  background: false
  rules:
    - name: generate-network-policy-default-deny
      match:
        any:
          - resources:
              kinds: ["Namespace"]
      exclude:
        any:
          - resources:
              namespaces:
                [
                  "kube-system",
                  "kube-public",
                  "kube-node-lease",
                  "kyverno",
                  "olm",
                  "cert-manager",
                  "operators"
                ]
      preconditions:
        all:
          - key: "{{ request.operation }}"
            operator: Equals
            value: CREATE
          - key: "{{ request.object.metadata.labels.\"network.kubernetes.io/skip-default-network-policy\" || 'false' }}"
            operator: NotEquals
            value: "true"
          - key: "{{ request.object.metadata.labels.\"skip-network-policy\" || 'false' }}"
            operator: NotEquals
            value: "true"
      generate:
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        name: default-deny-all
        namespace: "{{ request.object.metadata.name }}"
        synchronize: false
        data:
          spec:
            podSelector: {}
            policyTypes: ["Ingress", "Egress"]


---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-restricted-securitycontext
  annotations:
    policies.kyverno.io/title: Enforce Restricted Security Context
    policies.kyverno.io/category: Security
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Deployment
    policies.kyverno.io/description: >-
      Automatically applies restrictive security context settings to Deployments to
      enhance container security. This includes running as non-root, dropping all
      capabilities, preventing privilege escalation, and using the default seccomp profile.
spec:
  background: false
  rules:
    - name: add-restricted-securitycontext
      match:
        any:
          - resources:
              kinds:
                - Deployment
      mutate:
        patchStrategicMerge:
          spec:
            template:
              spec:
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 101
                  seccompProfile:
                    type: RuntimeDefault
                containers:
                  - (name): "*"
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - "ALL"

---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: create-default-pdb
  annotations:
    policies.kyverno.io/title: Add Pod Disruption Budget
    policies.kyverno.io/category: Availability
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Deployment
    policies.kyverno.io/description: >-
      A PodDisruptionBudget limits the number of Pods of a replicated application that
      are down simultaneously from voluntary disruptions. For example, a quorum-based
      application would like to ensure that the number of replicas running is never brought
      below the number needed for a quorum. As an application owner, you can create a PodDisruptionBudget (PDB)
      for each application. This policy will create a PDB resource whenever a new Deployment is created.
spec:
  rules:
  - name: create-default-pdb
    match:
      any:
      - resources:
          kinds:
          - Deployment
    generate:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      name: "{{request.object.metadata.name}}-default-pdb"
      namespace: "{{request.object.metadata.namespace}}"
      data:
        spec:
          minAvailable: 1
          selector: "{{request.object.spec.selector}}"

---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: block-namespace-with-tld
  annotations:
    policies.kyverno.io/title: Block Namespace Creation with TLD
    policies.kyverno.io/category: Namespace Governance
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Namespace
    policies.kyverno.io/description: >-
      Prevents the creation of namespaces whose names end with a top-level domain
      such as .com, .org, .net, .io, and others. This helps avoid confusion with
      internet domain names and enforces naming standards within the cluster.
spec:
  validationFailureAction: Enforce
  background: false
  rules:
    - name: deny-tld-namespaces
      match:
        any:
          - resources:
              kinds:
                - Namespace
      validate:
        message: "Namespaces cannot have names ending with a top-level domain."
        pattern:
          metadata:
            name: "!*.com|!*.org|!*.net|!*.io|!*.co|!*.gov|!*.edu|!*.mil|!*.biz|!*.info|!*.xyz|!*.tech|!*.dev|!*.app|!*.ai|!*.me|!*.us|!*.uk|!*.ca|!*.au|!*.de|!*.jp|!*.fr|!*.in|!*.cn"

---

apiVersion: kyverno.io/v1
kind: Policy
metadata:
  name: block-workloads-in-this-namespace
  namespace: default
  annotations:
    policies.kyverno.io/title: Block Deployments in This Namespace
    policies.kyverno.io/category: Namespace Governance
    kyverno.io/kyverno-version: 1.6.2
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/subject: Workloads
    policies.kyverno.io/description: >-
      Prevents creation or updates of workloads in this namespace.
      Intended for restricting application deployments in the default namespace.
spec:
  validationFailureAction: Enforce
  background: false
  rules:
    - name: deny-workloads
      match:
        any:
          - resources:
              kinds:
                - Deployment
                - StatefulSet
                - DaemonSet
                - Job
                - CronJob
                - ReplicaSet
                - Pod
      validate:
        message: "Creating workloads in this namespace is not allowed."
        deny: {}


---
apiVersion: kyverno.io/v2
kind: PolicyException
metadata:
  name: allow-olm-and-operators
  namespace: kyverno
spec:
  match:
    any:
      - resources:
          kinds: ["Namespace"]
          names: ["olm", "operators"]
          operations: ["CREATE", "UPDATE"]
      - resources:
          kinds:
            - Deployment
            - StatefulSet
            - DaemonSet
            - Job
            - CronJob
            - ReplicaSet
            - Pod
            - NetworkPolicy
            - ResourceQuota
            - LimitRange
            - PodDisruptionBudget
          namespaces: ["olm", "operators"]
          operations: ["CREATE", "UPDATE"]
  exceptions:
    - policyName: label-pss-on-new-ns
      ruleNames: ["label-pss"]
    - policyName: generate-limitrange-per-namespace
      ruleNames: ["generate-limitrange"]
    - policyName: generate-resourcequota-per-namespace
      ruleNames: ["generate-resourcequota"]
    - policyName: generate-network-policy-default-deny-per-namespace
      ruleNames: ["generate-network-policy-default-deny"]
    - policyName: enforce-restricted-securitycontext
      ruleNames: ["add-restricted-securitycontext"]
    - policyName: create-default-pdb
      ruleNames: ["create-default-pdb"]
    - policyName: block-namespace-with-tld
      ruleNames: ["deny-tld-namespaces"]

---

# Policies for multi-tenant scheduling based on user who created namespace

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: label-namespace-with-tenant
spec:
  background: false
  validationFailureAction: Enforce
  rules:
    - name: add-tenant-label-from-user
      match:
        any:
          - resources:
              kinds: ["Namespace"]
              operations: ["CREATE"]
      exclude:
        any:
          - resources:
              names: ["kube-system","kyverno","olm","cert-manager","operators"]
      preconditions:
        all:
          - key: "{{ request.object.metadata.labels.\"tenant-policy\" || '' }}"
            operator: NotEquals
            value: "disabled"
          - key: "{{ request.object.metadata.labels.tenant || '' }}"
            operator: Equals
            value: ""
      mutate:
        patchStrategicMerge:
          metadata:
            labels:
              tenant: "{{ request.userInfo.username }}"

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: generate-tenant-pod-mutation
spec:
  background: false
  validationFailureAction: Enforce
  rules:
    - name: create-ns-policy-to-pin-pods
      match:
        any:
          - resources:
              kinds: ["Namespace"]
              operations: ["CREATE"]
      exclude:
        any:
          - resources:
              names: ["kube-system","kyverno","olm","cert-manager","operators"]
      preconditions:
        all:
          - key: "{{ request.object.metadata.labels.tenant || '' }}"
            operator: NotEquals
            value: ""
          - key: "{{ request.object.metadata.labels.\"tenant-policy\" || '' }}"
            operator: NotEquals
            value: "disabled"
      generate:
        apiVersion: kyverno.io/v1
        kind: Policy
        name: enforce-tenant-scheduling
        namespace: "{{ request.object.metadata.name }}"
        synchronize: true
        data:
          apiVersion: kyverno.io/v1
          kind: Policy
          metadata:
            name: enforce-tenant-scheduling
          spec:
            validationFailureAction: Enforce
            rules:
              - name: set-node-selector-and-toleration
                match:
                  any:
                    - resources:
                        kinds: ["Pod"]
                mutate:
                  patchesJson6902: |-
                    - op: add
                      path: /spec/nodeSelector
                      value:
                        tenant: "{{ request.object.metadata.labels.tenant }}"
                    - op: add
                      path: /spec/tolerations/-
                      value:
                        key: "tenant"
                        operator: "Equal"
                        value: "{{ request.object.metadata.labels.tenant }}"
                        effect: "NoSchedule"



---


apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: bind-namespace-creator-to-namespace-admin
spec:
  background: false
  rules:
    - name: bind-creator-to-ns-admin
      match:
        any:
          - resources:
              kinds:
                - Namespace
              operations:
                - CREATE
      generate:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        name: ns-owner-admin
        namespace: "{{ request.object.metadata.name }}"
        synchronize: true
        data:
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: admin
          subjects:
            - kind: User
              name: "{{ request.userInfo.username }}"